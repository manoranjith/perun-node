// Copyright (c) 2020 - for information on the respective copyright owner
// see the NOTICE file and/or the repository at
// https://github.com/hyperledger-labs/perun-node
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// Package pb contains proto3 definitions for user API and the corresponding
// generated code for grpc server and client.
package pb;

import "nodetypes.proto";
import "errors.proto";

// Option go_package is to specify the exact path where the generated go code should reside.
option go_package = ".;pb";

// Payment_API provides APIs for a user to open payment channels, send/receive payments
// and finalize the channels on the blockchain 
service Payment_API{
    rpc GetConfig (GetConfigReq) returns (GetConfigResp){}
    rpc OpenSession (OpenSessionReq) returns (OpenSessionResp) {}
    rpc Time (TimeReq) returns (TimeResp) {}
    rpc RegisterCurrency(RegisterCurrencyReq) returns (RegisterCurrencyResp) {}
    rpc Help (HelpReq) returns (HelpResp) {}

    rpc AddPeerID (AddPeerIDReq) returns (AddPeerIDResp) {}
    rpc GetPeerID (GetPeerIDReq) returns (GetPeerIDResp) {}
    rpc OpenPayCh (OpenPayChReq) returns (OpenPayChResp) {}
    rpc GetPayChsInfo (GetPayChsInfoReq) returns (GetPayChsInfoResp) {}
    rpc SubPayChProposals (SubPayChProposalsReq) returns (stream SubPayChProposalsResp) {}
    rpc UnsubPayChProposals (UnsubPayChProposalsReq) returns (UnsubPayChProposalsResp) {}
    rpc RespondPayChProposal (RespondPayChProposalReq) returns (RespondPayChProposalResp) {}
    rpc CloseSession (CloseSessionReq) returns (CloseSessionResp) {}
    rpc DeployAssetERC20(DeployAssetERC20Req) returns (DeployAssetERC20Resp) {}

    rpc SendPayChUpdate (SendPayChUpdateReq) returns (SendPayChUpdateResp) {}
    rpc SubPayChUpdates (SubpayChUpdatesReq) returns (stream SubPayChUpdatesResp) {}
    rpc UnsubPayChUpdates (UnsubPayChUpdatesReq) returns (UnsubPayChUpdatesResp) {}
    rpc RespondPayChUpdate (RespondPayChUpdateReq) returns (RespondPayChUpdateResp) {}
    rpc GetPayChInfo (GetPayChInfoReq) returns (GetPayChInfoResp) {}
    rpc ClosePayCh (ClosePayChReq) returns (ClosePayChResp) {}
}

message GetConfigReq {
}

message GetConfigResp{
    string chainAddress = 1;
    string adjudicator = 2;
    string assetETH = 3;
    repeated string commTypes = 4;
    repeated string idProviderTypes = 5;
}

message OpenSessionReq {
    string configFile = 1;
}

message OpenSessionResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        string sessionID = 1;
        repeated PayChInfo restoredChs = 2;
    }
}

message TimeReq {
}

message TimeResp {
    int64 time = 1;
}

message RegisterCurrencyReq {
    string tokenAddr = 1;
    string assetAddr = 2;
}

message RegisterCurrencyResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        string symbol = 1;
    }
}

message HelpReq {
}

message HelpResp {
    repeated string apis = 1;
}

message AddPeerIDReq {
    string sessionID=1;
    PeerID peerID=2;
}

message AddPeerIDResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        bool success=1;
    }
}

message GetPeerIDReq {
    string sessionID=1;
    string alias = 2;
}

message  GetPeerIDResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PeerID peerID = 1;
    }
}

message OpenPayChReq {
    string sessionID = 1;
    BalInfo openingBalInfo = 2;
    uint64 challengeDurSecs = 3;
}

message OpenPayChResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo openedPayChInfo = 1;
    }
}

message GetPayChsInfoReq {
    string sessionID = 1;
}

message GetPayChsInfoResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        repeated PayChInfo openPayChsInfo = 1;
    }
}

message SubPayChProposalsReq {
    string sessionID = 1;
}

message SubPayChProposalsResp {
    oneof response{
        Notify notify = 1;
        MsgError error = 2;
    }
    message Notify {
        string proposalID = 2;
        BalInfo openingBalInfo = 4;
        uint64 challengeDurSecs = 5;
        int64 expiry = 6;
    }
}

message UnsubPayChProposalsReq {
    string sessionID=1;
}

message UnsubPayChProposalsResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        bool success=1;
    }
}

message RespondPayChProposalReq{
    string sessionID=1;
    string proposalID=2;
    bool accept =3;
}

message RespondPayChProposalResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo openedPayChInfo=2;
    }
}

message CloseSessionReq {
    string sessionID = 1;
    bool force = 2;
}

message CloseSessionResp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        repeated PayChInfo openPayChsInfo = 1;
    }
}

message DeployAssetERC20Req {
    string sessionID = 1;
    string tokenAddr = 2;
}

message DeployAssetERC20Resp {
    oneof response {
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        string AssetAddr = 2;
    }
}

message SendPayChUpdateReq {
    string sessionID = 1;
    string chID = 2;
    repeated Payment payments = 3;
}

message SendPayChUpdateResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo updatedPayChInfo = 1;
    }
}

message SubpayChUpdatesReq {
    string sessionID = 1;
    string chID = 2;
}

message SubPayChUpdatesResp {
    oneof response{
        Notify notify = 1;
        MsgError error = 2;
    }
    message Notify {
        enum ChUpdateType {
            open = 0;
            final = 1;
            closed = 2;
        }
        string updateID = 1;
        PayChInfo proposedPayChInfo = 2;
        ChUpdateType Type = 3;
        int64 expiry = 4;
        MsgError error = 5;
    }
}

message UnsubPayChUpdatesReq {
    string sessionID = 1;
    string chID = 2;
}

message UnsubPayChUpdatesResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        bool success=1;
    }
}

message RespondPayChUpdateReq{
    string sessionID=1;
    string chID=2;
    string updateID=3;
    bool accept=4;
}

message RespondPayChUpdateResp {
    oneof response{
        MsgSuccess msgSuccess=1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo updatedPayChInfo = 1;
    }
}

message GetPayChInfoReq {
    string sessionID=1;
    string chID=2;
}

message GetPayChInfoResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo payChInfo = 1;
    }
}

message ClosePayChReq {
    string sessionID = 1;
    string chID = 2;
}

message ClosePayChResp {
    oneof response{
        MsgSuccess msgSuccess = 1;
        MsgError error = 2;
    }
    message MsgSuccess {
        PayChInfo closedPayChInfo = 1;
    }
}
